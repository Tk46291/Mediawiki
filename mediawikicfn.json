{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Parameters":{
      
      "KeyName":{
         "Description":"Name of an existing EC2 KeyPair to enable SSH access to the instances",
         "Type":"AWS::EC2::KeyPair::KeyName",
         "ConstraintDescription":"must be the name of an existing EC2 KeyPair."
      },
      "DBName":{
         "Default":"my_wiki",
         "Description":"MySQL database name",
         "Type":"String",
         "MinLength":"1",
         "MaxLength":"64",
         "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
         "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
      },
      "DBUser":{
         "NoEcho":"true",
         "Description":"Username for MySQL database access",
         "Type":"String",
         "MinLength":"1",
         "MaxLength":"16",
         "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
         "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
      },
      "DBPassword":{
         "NoEcho":"true",
         "Description":"Password for MySQL database access",
         "Type":"String",
         "MinLength":"8",
         "MaxLength":"41",
         "AllowedPattern":"[a-zA-Z0-9]*",
         "ConstraintDescription":"must contain only alphanumeric characters."
      },
      "DBAllocatedStorage":{
         "Default":"5",
         "Description":"The size of the database (Gb)",
         "Type":"Number",
         "MinValue":"5",
         "MaxValue":"1024",
         "ConstraintDescription":"must be between 5 and 1024Gb."
      },
      "DBInstanceClass":{
         "Description":"The database instance type",
         "Type":"String",
         "Default":"db.t2.small",
         "AllowedValues":[
            "db.t1.micro",
            "db.m1.small",
            "db.m1.medium",
            "db.t2.small"
         ],
         "ConstraintDescription":"must select a valid database instance type."
      },
      "MultiAZDatabase":{
         "Default":"true",
         "Description":"Create a Multi-AZ MySQL Amazon RDS database instance",
         "Type":"String",
         "AllowedValues":[
            "true",
            "false"
         ],
         "ConstraintDescription":"must be either true or false."
      },
      "WebServerCapacity":{
         "Default":"2",
         "Description":"The initial number of WebServer instances",
         "Type":"Number",
         "MinValue":"1",
         "MaxValue":"3",
         "ConstraintDescription":"must be between 1 and 3 EC2 instances."
      },
      "InstanceType":{
         "Description":"WebServer EC2 instance type",
         "Type":"String",
         "Default":"t2.small",
         "AllowedValues":[
            "t1.micro",
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium"
         ],
         "ConstraintDescription":"must be a valid EC2 instance type."
      },
      "SSHLocation":{
         "Description":" The IP address range that can be used to SSH to the EC2 instances",
         "Type":"String",
         "MinLength":"9",
         "MaxLength":"18",
         "Default":"0.0.0.0/0",
         "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription":"must be a valid IP CIDR range of the form x.x.x.x/x."
      }
   },
   "Mappings":{
      "AWSRegionAMI":{
         "af-south-1":{
            "HVM64":"ami-064cc455f8a1ef504"
         },
         "ap-east-1":{
            "HVM64":"ami-f85b1989"
         },
         "ap-northeast-1":{
            "HVM64":"ami-0b2c2a754d5b4da22"
         },
         "ap-northeast-2":{
            "HVM64":"ami-0493ab99920f410fc"
         },
         "ap-northeast-3":{
            "HVM64":"ami-01344f6f63a4decc1"
         },
         "us-east-1":{
            "HVM64":"ami-032930428bf1abbff"
         },
         "us-east-2":{
            "HVM64":"ami-027cab9a7bf0155df"
         },
         "us-west-1":{
            "HVM64":"ami-088c153f74339f34c"
         },
         "us-west-2":{
            "HVM64":"ami-01fee56b22f308154"
         }
      }
   },
   "Resources":{

"VPC": {
         "Type": "AWS::EC2::VPC",
         "Properties": {
            "CidrBlock": "172.31.0.0/16"
         }
      },
      "PublicSubnet": {
         "Type": "AWS::EC2::Subnet",
         "Properties": {
            "VpcId":{
                     "Fn::GetAtt":[
                        "VPC",
                        "VPCId"
                     ]
                  },
                   
            "AvailabilityZone": "us-east-1a",
            "CidrBlock": "172.31.1.0/24",
            "MapPublicIpOnLaunch": true
         }
      },
      
      
      "InternetGateway": {
         "Type": "AWS::EC2::InternetGateway",
         "Properties": {
            "Tags": [
               {
                  "Key": "Name",
                  "Value": null
               },
               {
                  "Key": "Network",
                  "Value": "Public"
               }
            ]
         }
      },
      "GatewayToInternet": {
         "Type": "AWS::EC2::VPCGatewayAttachment",
         "Properties": {
            "VpcId":{
                     "Fn::GetAtt":[
                        "VPC",
                        "VPCId"
                     ]
                  },
            "InternetGatewayId": null
         }
      },
      "PublicRouteTable": {
         "Type": "AWS::EC2::RouteTable",
         "Properties": {
           "VpcId":{
                     "Fn::GetAtt":[
                        "VPC",
                        "VPCId"
                     ]
                  },
            "Tags": [
               {
                  "Key": "Network",
                  "Value": "Public"
               }
            ]
         }
      },
      "PublicRoute": {
         "Type": "AWS::EC2::Route",
         "DependsOn": "GatewayToInternet",
         "Properties": {
            "RouteTableId": null,
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": null
         }
      },
      "PublicSubnetRouteTableAssociation": {
         "Type": "AWS::EC2::SubnetRouteTableAssociation",
         "Properties": {
            "SubnetId": null,
            "RouteTableId": null
         }
      },
      
      "ApplicationLoadBalancer":{
         "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
         "Properties":{
            "Subnets":{
               "Ref":"PublicSubnet"
            }
         }
      },
      "ALBListener":{
         "Type":"AWS::ElasticLoadBalancingV2::Listener",
         "Properties":{
            "DefaultActions":[
               {
                  "Type":"forward",
                  "TargetGroupArn":{
                     "Ref":"ALBTargetGroup"
                  }
               }
            ],
            "LoadBalancerArn":{
               "Ref":"ApplicationLoadBalancer"
            },
            "Port":"80",
            "Protocol":"HTTP"
         }
      },
      "ALBTargetGroup":{
         "Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
         "Properties":{
            "HealthCheckIntervalSeconds":10,
            "HealthCheckTimeoutSeconds":5,
            "HealthyThresholdCount":2,
            "Port":80,
            "Protocol":"HTTP",
            "UnhealthyThresholdCount":5,
            "VpcId":{
                     "Fn::GetAtt":[
                        "VPC",
                        "VPCId"
                     ]
                  },
            "TargetGroupAttributes":[
               {
                  "Key":"stickiness.enabled",
                  "Value":"true"
               },
               {
                  "Key":"stickiness.type",
                  "Value":"lb_cookie"
               },
               {
                  "Key":"stickiness.lb_cookie.duration_seconds",
                  "Value":"30"
               }
            ]
         }
      },
      "WebServerGroup":{
         "Type":"AWS::AutoScaling::AutoScalingGroup",
         "Properties":{
            "VPCZoneIdentifier":{
               "Ref":"Subnets"
            },
            "LaunchConfigurationName":{
               "Ref":"LaunchConfig"
            },
            "MinSize":"1",
            "MaxSize":"2",
            "DesiredCapacity":{
               "Ref":"WebServerCapacity"
            },
            "TargetGroupARNs":[
               {
                  "Ref":"ALBTargetGroup"
               }
            ]
         },
         "LaunchConfig":{
            "Type":"AWS::AutoScaling::LaunchConfiguration",
            "Metadata":{
              
               "AWS::CloudFormation::Init":{
                  "config":{
                     "packages":{
                        "yum":{
                           "apache2 ":[
                              
                           ],
                           "php":[
                              
                           ],
                           "php-mysql":[
                              
                           ]
                        }
                     },
                     "files":{
                        "/var/www/html/index.php":{
                           "content":{
                              "Fn::Join":[
                                 "",
                                 [
                                    "<html>\n",
                                    "  <head>\n",
                                    "    <title>Mediawiki application setup</title>\n",
                                    "    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
                                    "  </head>\n",
                                    "  <body>\n",
                                    "    <h1>Mediawiki application setup</h1>\n",
                                    "     <?php\n",
                                    "      // Setup a handle for CURL\n",
                                    "      $curl_handle=curl_init();\n",
                                    "      curl_setopt($curl_handle,CURLOPT_CONNECTTIMEOUT,2);\n",
                                    "      curl_setopt($curl_handle,CURLOPT_RETURNTRANSFER,1);\n",
                                    "      // Get the hostname of the intance from the instance metadata\n",
                                    "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/public-hostname');\n",
                                    "      $hostname = curl_exec($curl_handle);\n",
                                    "      if (empty($hostname))\n",
                                    "      {\n",
                                    "        print \"Sorry, for some reason, we got no hostname back <br />\";\n",
                                    "      }\n",
                                    "      else\n",
                                    "      {\n",
                                    "        print \"Server = \" . $hostname . \"<br />\";\n",
                                    "      }\n",
                                    "      // Get the instance-id of the intance from the instance metadata\n",
                                    "      curl_setopt($curl_handle,CURLOPT_URL,'http://169.254.169.254/latest/meta-data/instance-id');\n",
                                    "      $instanceid = curl_exec($curl_handle);\n",
                                    "      if (empty($instanceid))\n",
                                    "      {\n",
                                    "        print \"Sorry, for some reason, we got no instance id back <br />\";\n",
                                    "      }\n",
                                    "      else\n",
                                    "      {\n",
                                    "        print \"EC2 instance-id = \" . $instanceid . \"<br />\";\n",
                                    "      }\n",
                                    "      $Database   = \"",
                                    {
                                       "Fn::GetAtt":[
                                          "MySQLDatabase",
                                          "Endpoint.Address"
                                       ]
                                    },
                                    "\";\n",
                                    "      $DBUser     = \"",
                                    {
                                       "Ref":"DBUser"
                                    },
                                    "\";\n",
                                    "      $DBPassword = \"",
                                    {
                                       "Ref":"DBPassword"
                                    },
                                    "\";\n",
                                    "      print \"Database = \" . $Database . \"<br />\";\n",
                                    "      $dbconnection = mysql_connect($Database, $DBUser, $DBPassword)\n",
                                    "                      or die(\"Could not connect: \" . mysql_error());\n",
                                    "      print (\"Connected to $Database successfully\");\n",
                                    "      mysql_close($dbconnection);\n",
                                    "    ?>\n",
                                    "    <h2>PHP Information</h2>\n",
                                    "    <p/>\n",
                                    "    <?php\n",
                                    "      phpinfo();\n",
                                    "    ?>\n",
                                    "  </body>\n",
                                    "</html>\n"
                                 ]
                              ]
                           },
                           "mode":"000600",
                           "owner":"apache",
                           "group":"apache"
                        },
                        "/etc/cfn/cfn-hup.conf":{
                           "content":{
                              "Fn::Join":[
                                 "",
                                 [
                                    "[main]\n",
                                    "stack=",
                                    {
                                       "Ref":"AWS::StackId"
                                    },
                                    "\n",
                                    "region=",
                                    {
                                       "Ref":"AWS::Region"
                                    },
                                    "\n"
                                 ]
                              ]
                           },
                           "mode":"000400",
                           "owner":"root",
                           "group":"root"
                        },
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{
                           "content":{
                              "Fn::Join":[
                                 "",
                                 [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                    "         --stack ",
                                    {
                                       "Ref":"AWS::StackName"
                                    },
                                    "         --resource LaunchConfig ",
                                    "         --region ",
                                    {
                                       "Ref":"AWS::Region"
                                    },
                                    "\n",
                                    "runas=root\n"
                                 ]
                              ]
                           },
                           "mode":"000400",
                           "owner":"root",
                           "group":"root"
                        }
                     },
                     "services":{
                        "sysvinit":{
                           "httpd":{
                              "enabled":"true",
                              "ensureRunning":"true"
                           },
                           "cfn-hup":{
                              "enabled":"true",
                              "ensureRunning":"true",
                              "files":[
                                 "/etc/cfn/cfn-hup.conf",
                                 "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                              ]
                           }
                        }
                     }
                  }
               }
            },
            "Properties":{
               "ImageId":{
                  "Fn::FindInMap":[
                     "AWSRegionAMI",
                     {
                        "Ref":"AWS::Region"
                     },
                     "HVM64"
                  ]
               },
               "InstanceType":{
                  "Ref":"InstanceType"
               },
               "SecurityGroups":[
                  {
                     "Ref":"WebServerSecurityGroup"
                  }
               ],
               "KeyName":{
                  "Ref":"KeyName"
               },
               "UserData":{
                  "Fn::Base64":{
                     "Fn::Join":[
                        "",
                        [
                           "#!/bin/bash -xe\n",
                           "yum update -y aws-cfn-bootstrap\n",
                           "# Install the files and packages from the metadata\n",
                           "/opt/aws/bin/cfn-init -v ",
                           "         --stack ",
                           {
                              "Ref":"AWS::StackName"
                           },
                           "         --resource LaunchConfig ",
                           "         --region ",
                           {
                              "Ref":"AWS::Region"
                           },
                           "\n",
                           "# Signal the status from cfn-init\n",
                           "/opt/aws/bin/cfn-signal -e $? ",
                           "         --stack ",
                           {
                              "Ref":"AWS::StackName"
                           },
                           "         --resource WebServerGroup ",
                           "         --region ",
                           {
                              "Ref":"AWS::Region"
                           },
                           "\n",
                           "#!/bin/bash\n",
                           "sudo useradd - m Mediawiki\n",
                           "cd /home/mediawiki\n",
                           "wget https: //releases.wikimedia.org/mediawiki/1.36/mediawiki-1.36.1.tar.gz\n",
                           "wget https: //releases.wikimedia.org/mediawiki/1.36/mediawiki-1.36.1.tar.gz.sig\n",
                           "gpg--verify mediawiki - 1.36 .1.tar.gz.sig mediawiki - 1.36 .1.tar.gz\n",
                           "cd /var/www\n",
                           "tar - zxf / home / mediawiki / mediawiki - 1.36 .1.tar.gz\n",
                           "ln - s mediawiki - 1.36 .1 / mediawiki\n",
                           "chown -R apache /var/www/mediawiki\n",
                           "cd /etc/httpd/conf/n",
                           "sed,'s/var/www/,var/www/mediawiki/g', httpd.conf \n",
                           "service httpd restart\n"
                        ]
                     ]
                  }
               }
            }
         },
         "WebServerSecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
               "GroupDescription":"Enable HTTP access via port 80 locked down to the ELB and SSH access",
               "SecurityGroupIngress":[
                  {
                     "IpProtocol":"tcp",
                     "FromPort":"80",
                     "ToPort":"80",
                     "SourceSecurityGroupId":{
                        "Fn::Select":[
                           0,
                           {
                              "Fn::GetAtt":[
                                 "ApplicationLoadBalancer",
                                 "SecurityGroups"
                              ]
                           }
                        ]
                     }
                  },
                  {
                     "IpProtocol":"tcp",
                     "FromPort":"22",
                     "ToPort":"22",
                     "CidrIp":{
                        "Ref":"SSHLocation"
                     }
                  }
               ],
               "VpcId":{
                     "Fn::GetAtt":[
                        "VPC",
                        "VPCId"
                     ]
                  },
            }
         },
         "DBEC2SecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
               "GroupDescription":"Open database for access",
               "SecurityGroupIngress":[
                  {
                     "IpProtocol":"tcp",
                     "FromPort":"3306",
                     "ToPort":"3306",
                     "SourceSecurityGroupId":{
                        "Ref":"WebServerSecurityGroup"
                     }
                  }
               ],
               "VpcId":{
                     "Fn::GetAtt":[
                        "VPC",
                        "VPCId"
                     ]
                  }
            }
         },
         "MySQLDatabase":{
            "Type":"AWS::RDS::DBInstance",
            "Properties":{
               "Engine":"MySQL",
               "DBName":{
                  "Ref":"DBName"
               },
               "MultiAZ":{
                  "Ref":"MultiAZDatabase"
               },
               "MasterUsername":{
                  "Ref":"DBUser"
               },
               "MasterUserPassword":{
                  "Ref":"DBPassword"
               },
               "DBInstanceClass":{
                  "Ref":"DBInstanceClass"
               },
               "AllocatedStorage":{
                  "Ref":"DBAllocatedStorage"
               },
               "VPCSecurityGroups":[
                  {
                     "Fn::GetAtt":[
                        "DBEC2SecurityGroup",
                        "GroupId"
                     ]
                  }
               ]
            }
         }
      },
      "Outputs":{
         "WebsiteURL":{
            "Description":"URL for Media wiki application",
            "Value":{
               "Fn::Join":[
                  "",
                  [
                     "http://",
                     {
                        "Fn::GetAtt":[
                           "ApplicationLoadBalancer",
                           "DNSName"
                        ]
                     }
                  ]
               ]
            }
         }
      }
   }
}
